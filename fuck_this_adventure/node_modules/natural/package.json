{
  "name": "natural",
  "description": "General natural language (tokenizing, stemming, classification, inflection, phonetics, tfidf, WordNet, jaro-winkler, Levenshtein distance, Dice's Coefficient) facilities for node.",
  "version": "0.1.17",
  "homepage": "https://github.com/NaturalNode/natural",
  "engines": {
    "node": ">=0.4.10"
  },
  "dependencies": {
    "sylvester": ">= 0.0.12",
    "apparatus": ">= 0.0.6",
    "underscore": ">=1.3.1"
  },
  "devDependencies": {
    "uubench": "0.0.x"
  },
  "author": {
    "name": "Chris Umbel",
    "email": "chris@chrisumbel.com"
  },
  "keywords": [
    "natural",
    "language",
    "porter",
    "lancaster",
    "stemmer",
    "bayes",
    "classifier",
    "phonetic",
    "metaphone",
    "inflector",
    "wordnet",
    "tf-idf",
    "logistic",
    "regression",
    "doublemetaphone",
    "double",
    "jaro-winkler",
    "levenshtein",
    "distance"
  ],
  "main": "./lib/natural/index.js",
  "maintainers": [
    {
      "name": "Chris Umbel",
      "email": "chris@chrisumbel.com",
      "url": "http://www.chrisumbel.com"
    },
    {
      "name": "Rob Ellis",
      "email": "rob@silentrob.me"
    }
  ],
  "readme": "natural\n=======\n\n\"Natural\" is a general natural language facility for node.js. Tokenizing,\nstemming, classification, phonetics, tf-idf, WordNet, string similarity,\nand some inflections are currently supported.\n\nIt's still in the early stages, so we're very interested in bug reports,\ncontributions and the like.\n\nNote that many algorithms from Rob Ellis's [node-nltools](https://github.com/NaturalNode/node-nltools) are\nbeing merged into this project and will be maintained from here onward.\n\nAt the moment, most of the algorithms are English-specific, but in the long-term, some diversity\nwill be in order. Thanks to Polyakov Vladimir, Russian stemming has been added!\n\nAside from this README, the only documentation is [this DZone article](http://www.dzone.com/links/r/using_natural_a_nlp_module_for_nodejs.html) and [here on my blog](http://www.chrisumbel.com/article/node_js_natural_language_porter_stemmer_lancaster_bayes_naive_metaphone_soundex), which is a bit older.\n\nInstallation\n------------\n\nIf you're just looking to use natural without your own node application,\nyou can install via NPM like so:\n\n    npm install natural\n\nIf you're interested in contributing to natural, or just hacking on it, then by all\nmeans fork away!\n\nTokenizers\n----------\n\nWord, Regexp, and Treebank tokenizers are provided for breaking text up into\narrays of tokens:\n\n    var natural = require('natural'),\n      tokenizer = new natural.WordTokenizer();\n    console.log(tokenizer.tokenize(\"your dog has flees.\"));\n    // [ 'your', 'dog', 'has', 'flees' ]\n\nThe other tokenizers follow a similar pattern:\n\n    tokenizer = new natural.TreebankWordTokenizer();\n    console.log(tokenizer.tokenize(\"my dog hasn't any flees.\"));\n    // [ 'my', 'dog', 'has', 'n\\'t', 'any', 'flees', '.' ]\n\n    tokenizer = new natural.RegexpTokenizer({pattern: /\\-/});\n    console.log(tokenizer.tokenize(\"flee-dog\"));\n    // [ 'flee', 'dog' ]\n\n    tokenizer = new natural.WordPunctTokenizer();\n    console.log(tokenizer.tokenize(\"my dog hasn't any flees.\"));\n    // [ 'my',  'dog',  'hasn',  '\\'',  't',  'any',  'flees',  '.' ]\n\nString Distance\n----------------------\nNatural provides an implementation of the Jaro-Winkler string distance measuring algorithm.\nThis will return a number between 0 and 1 which tells how closely the strings match (0 = not at all, 1 = exact match):\n\n    var natural = require('natural');\n    console.log(natural.JaroWinklerDistance(\"dixon\",\"dicksonx\"))\n    console.log(natural.JaroWinklerDistance('not', 'same'));\n\nOutput:\n\n    0.7466666666666666\n    0\n\nNatural also offers support for Levenshtein distances:\n\n    var natural = require('natural');\n    console.log(natural.LevenshteinDistance(\"ones\",\"onez\"));\n    console.log(natural.LevenshteinDistance('one', 'one'));\n\nOutput:\n\n    2\n    0\n\nThe cost of the three edit operations are modifiable for Levenshtein:\n\n    console.log(natural.LevenshteinDistance(\"ones\",\"onez\", {\n        insertion_cost: 1,\n        deletion_cost: 1,\n        substitution_cost: 1\n    }));\n\nOutput:\n\n    1\n\nAnd Dice's co-efficient:\n\n    var natural = require('natural');\n    console.log(natural.DiceCoefficient('thing', 'thing'));\n    console.log(natural.DiceCoefficient('not', 'same'));\n\nOutput:\n\n    1\n    0\n\nStemmers\n--------\n\nCurrently, stemming is supported via the Porter (English and Russian) and Lancaster (Paice/Husk)\nalgorithms.\n\n    var natural = require('natural');\n\nThis example uses a Porter stemmer. \"word\" is returned.\n\n    console.log(natural.PorterStemmer.stem(\"words\")); // stem a single word\n\nand in Russian:\n\n    console.log(natural.PorterStemmerRu.stem(\"падший\"));\n\n`attach()` patches `stem()` and `tokenizeAndStem()` to String as a shortcut to\n`PorterStemmer.stem(token)`. `tokenizeAndStem()` breaks text up into single words\nand returns an array of stemmed tokens.\n\n    natural.PorterStemmer.attach();\n    console.log(\"i am waking up to the sounds of chainsaws\".tokenizeAndStem());\n    console.log(\"chainsaws\".stem());\n\nthe same thing can be done with a Lancaster stemmer:\n\n    natural.LancasterStemmer.attach();\n    console.log(\"i am waking up to the sounds of chainsaws\".tokenizeAndStem());\n    console.log(\"chainsaws\".stem());\n\nClassifiers\n----------------------\n\nTwo classifiers are currently supported, Naive Bayes and logistic regression.\nThe following examples use the BayesClassifier class, but the\nLogisticRegressionClassifier class could be substituted instead.\n\n    var natural = require('natural'),\n      classifier = new natural.BayesClassifier();\n\nYou can train the classifier on sample text. It will use reasonable defaults to\ntokenize and stem the text.\n\n    classifier.addDocument('i am long qqqq', 'buy');\n    classifier.addDocument('buy the q's', 'buy');\n    classifier.addDocument('short gold', 'sell');\n    classifier.addDocument('sell gold', 'sell');\n\n    classifier.train();\n\nOutputs \"sell\"\n\n    console.log(classifier.classify('i am short silver'));\n\nOutputs \"buy\"\n\n    console.log(classifier.classify('i am long copper'));\n\nYou have access to the set of matched classes and the associated value from the classifier.\n\nOutputs:\n\n    [ { label: 'sell', value: 0.39999999999999997 },\n      { label: 'buy', value: 0.19999999999999998 } ]\n\nFrom this:\n\n    console.log(classifier.getClassifications('i am long copper'));\n\n\nThe classifier can also be trained with and can classify arrays of tokens, strings, or\nany mixture of the two. Arrays let you use entirely custom data with your own\ntokenization/stemming, if you choose to implement it.\n\n    classifier.addDocument(['sell', 'gold'], 'sell');\n\nA classifier can also be persisted and recalled later so that you can reuse it later.\n\n    classifier.save('classifier.json', function(err, classifier) {\n        // the classifier is saved to the classifier.json file!\n    });\n\nTo recall from the classifier.json saved above:\n\n    natural.BayesClassifier.load('classifier.json', null, function(err, classifier) {\n        console.log(classifier.classify('long SUNW'));\n        console.log(classifier.classify('short SUNW'));\n    });\n\nA classifier can also be serialized and deserialized like so:\n\n    var classifier = new natural.BayesClassifier();\n    classifier.addDocument(['sell', 'gold'], 'sell');\n    classifier.addDocument(['buy', 'silver'], 'buy');\n\n    // serialize\n    var raw = JSON.stringify(classifier);\n    // deserialize\n    var restoredClassifier = natural.BayesClassifier.restore(JSON.parse(raw));\n    console.log(restoredClassifier.classify('i should sell that'));\n\nPhonetics\n---------\n\nPhonetic matching (sounds-like) matching can be done withthe SoundEx,\nMetaphone, or DoubleMetaphone algorithms:\n\n    var natural = require('natural'),\n        metaphone = natural.Metaphone, soundEx = natural.SoundEx;\n\n    var wordA = 'phonetics';\n    var wordB = 'fonetix';\n\nTo test the two words to see if they sound alike:\n\n    if(metaphone.compare(wordA, wordB))\n        console.log('they sound alike!');\n\nThe raw phonetics are obtained with `process()`:\n\n    console.log(metaphone.process('phonetics'));\n\nA maximum code length can be supplied:\n\n    console.log(metaphone.process('phonetics', 3));\n\n`DoubleMetaphone` deals with two encodings returned in an array. This\nfeature is experimental and subject to change:\n\n    var natural = require('natural'),\n      dm = natural.DoubleMetaphone;\n\n    var encodings = dm.process('Matrix');\n    console.log(encodings[0]);\n    console.log(encodings[1]);\n\nAttaching will patch String with useful methods:\n\n    metaphone.attach();\n\n`soundsLike` is essentially a shortcut to `Metaphone.compare`:\n\n    if(wordA.soundsLike(wordB))\n        console.log('they sound alike!');\n\nThe raw phonetics are obtained with `phonetics()`:\n\n    console.log('phonetics'.phonetics());\n\nFull text strings can be tokenized into arrays of phonetics (much like how tokenization-to-arrays works for stemmers):\n\n    console.log('phonetics rock'.tokenizeAndPhoneticize());\n\nSame module operations applied with `SoundEx`:\n\n    if(soundEx.compare(wordA, wordB))\n        console.log('they sound alike!');\n\nThe same String patches apply with `soundEx`:\n\n    soundEx.attach();\n\n    if(wordA.soundsLike(wordB))\n        console.log('they sound alike!');\n\n    console.log('phonetics'.phonetics());\n\n\nInflectors\n----------\n\n### Nouns\n\nNouns can be pluralized/singularized with a `NounInflector`:\n\n    var natural = require('natural'),\n    nounInflector = new natural.NounInflector();\n\nTo pluralize a word (outputs \"radii\"):\n\n    console.log(nounInflector.pluralize('radius'));\n\nTo singularize a word (outputs \"beer\"):\n\n    console.log(nounInflector.singularize('beers'));\n\nLike many of the other features, String can be patched to perform the operations\ndirectly. The \"Noun\" suffix on the methods is necessary, as verbs will be\nsupported in the future.\n\n    nounInflector.attach();\n    console.log('radius'.pluralizeNoun());\n    console.log('beers'.singularizeNoun());\n\n### Numbers\n\nNumbers can be counted with a CountInflector:\n\n    var countInflector = natural.CountInflector;\n\nOutputs \"1st\":\n\n    console.log(countInflector.nth(1));\n\nOutputs \"111th\":\n\n    console.log(countInflector.nth(111));\n\n### Present Tense Verbs\n\nPresent Tense Verbs can be pluralized/singularized with a PresentVerbInflector.\nThis feature is still experimental as of 0.0.42, so use with caution, and please\nprovide feedback.\n\n    var verbInflector = new natural.PresentVerbInflector();\n\nOutputs \"becomes\":\n\n    console.log(verbInflector.singularize('become'));\n\nOutputs \"become\":\n\n    console.log(verbInflector.pluralize('becomes'));\n\nLike many other natural modules, `attach()` can be used to patch strings with\nhandy methods.\n\n    verbInflector.attach();\n    console.log('walk'.singularizePresentVerb());\n    console.log('walks'.pluralizePresentVerb());\n\n\nN-Grams\n-------\n\nn-grams can be obtained for either arrays or strings (which will be tokenized\nfor you):\n\n    var NGrams = natural.NGrams;\n\n### bigrams\n\n    console.log(NGrams.bigrams('some words here'));\n    console.log(NGrams.bigrams(['some',  'words',  'here']));\n\nBoth of the above output: [ [ 'some', 'words' ], [ 'words', 'here' ] ]\n\n### trigrams\n\n    console.log(NGrams.trigrams('some other words here'));\n    console.log(NGrams.trigrams(['some',  'other', 'words',  'here']));\n\nBoth of the above output: [ [ 'some', 'other', 'words' ],\n  [ 'other', 'words', 'here' ] ]\n\n### arbitrary n-grams\n\n    console.log(NGrams.ngrams('some other words here for you', 4));\n    console.log(NGrams.ngrams(['some', 'other', 'words', 'here', 'for',\n        'you'], 4));\n\nThe above outputs: [ [ 'some', 'other', 'words', 'here' ],\n  [ 'other', 'words', 'here', 'for' ],\n  [ 'words', 'here', 'for', 'you' ] ]\n\ntf-idf\n-----\n\nTerm Frequency–Inverse Document Frequency (tf-idf) is implemented to determine how important a word (or words) is to a\ndocument relative to a corpus. The following example will add four documents to\na corpus and determine the weight of the word \"node\", then the weight of the\nword \"ruby\" in each document.\n\n    var natural = require('natural'),\n        TfIdf = natural.TfIdf,\n        tfidf = new TfIdf();\n\n    tfidf.addDocument('this document is about node.');\n    tfidf.addDocument('this document is about ruby.');\n    tfidf.addDocument('this document is about ruby and node.');\n    tfidf.addDocument('this document is about node. it has node examples');\n\n    console.log('node --------------------------------');\n    tfidf.tfidfs('node', function(i, measure) {\n        console.log('document #' + i + ' is ' + measure);\n    });\n\n    console.log('ruby --------------------------------');\n    tfidf.tfidfs('ruby', function(i, measure) {\n        console.log('document #' + i + ' is ' + measure);\n    });\n\nThe above outputs:\n\n    node --------------------------------\n    document #0 is 1.4469189829363254\n    document #1 is 0\n    document #2 is 1.4469189829363254\n    document #3 is 2.8938379658726507\n    ruby --------------------------------\n    document #0 is 0\n    document #1 is 1.466337068793427\n    document #2 is 1.466337068793427\n    document #3 is 0\n\nThis approach can also be applied to individual documents.\n\nThe following example measures the term \"node\" in the first and second documents.\n\n    console.log(tfidf.tfidf('node', 0));\n    console.log(tfidf.tfidf('node', 1));\n\nA TfIdf instance can also load documents from files on disk.\n\n    var tfidf = new TfIdf();\n    tfidf.addFileSync('data_files/one.txt');\n    tfidf.addFileSync('data_files/two.txt');\n\nMultiple terms can be measured as well, with their weights being added into\na single measure value. The following example determines that the last document\nis the most relevent to the words \"node\" and \"ruby\".\n\n    var natural = require('natural'),\n        TfIdf = natural.TfIdf,\n        tfidf = new TfIdf();\n\n    tfidf.addDocument('this document is about node.');\n    tfidf.addDocument('this document is about ruby.');\n    tfidf.addDocument('this document is about ruby and node.');\n\n    tfidf.tfidfs('node ruby', function(i, measure) {\n        console.log('document #' + i + ' is ' + measure);\n    });\n\nThe above outputs:\n\n    document #0 is 1.2039728043259361\n    document #1 is 1.2039728043259361\n    document #2 is 2.4079456086518722\n\nThe examples above all use strings, which case natural to automatically tokenize the input.\nIf you wish to perform your own tokenization or other kinds of processing, you\ncan do so, then pass in the resultant arrays later. This approach allows you to bypass natural's \ndefault preprocessing.\n\n    var natural = require('natural'),\n        TfIdf = natural.TfIdf,\n        tfidf = new TfIdf();\n\n    tfidf.addDocument(['document', 'about', 'node']);\n    tfidf.addDocument(['document', 'about', 'ruby']);\n    tfidf.addDocument(['document', 'about', 'ruby', 'node']);\n    tfidf.addDocument(['document', 'about', 'node', 'node', 'examples']);\n\n    tfidf.tfidfs(['node', 'ruby'], function(i, measure) {\n        console.log('document #' + i + ' is ' + measure);\n    });\n\nIt's possible to retrieve a list of all terms in a document, sorted by their\nimportance.\n\n    tfidf.listTerms(0 /*document index*/).forEach(function(item) {\n        console.log(item.term + ': ' + item.tfidf);\n    });\n\nA TfIdf instance can also be serialized and deserialzed for save and recall.\n\n    var tfidf = new TfIdf();\n    tfidf.addDocument('document one', 'un');\n    tfidf.addDocument('document Two', 'deux');\n    var s = JSON.stringify(tfidf);\n    // save \"s\" to disk, database or otherwise\n\n    // assuming you pulled \"s\" back out of storage.\n    var tfidf = new TfIdf(JSON.parse(s));\n\nWordNet\n-------\n\nOne of the newest and most experimental features in natural is WordNet integration. Here's an\nexample of using natural to look up definitions of the word node. To use the WordNet module,\nfirst install the WordNet database files using the [WNdb module](https://github.com/moos/WNdb):\n\n    npm install WNdb\n\n(For node < v0.6, please use 'npm install WNdb@3.0.0')\n\nKeep in mind that the WordNet integration is to be considered experimental at this point,\nand not production-ready. The API is also subject to change.\n\nHere's an exmple of looking up definitions for the word, \"node\".\n\n    var wordnet = new natural.WordNet();\n\n    wordnet.lookup('node', function(results) {\n        results.forEach(function(result) {\n            console.log('------------------------------------');\n            console.log(result.synsetOffset);\n            console.log(result.pos);\n            console.log(result.lemma);\n            console.log(result.synonyms);\n            console.log(result.pos);\n            console.log(result.gloss);\n        });\n    });\n\nGiven a synset offset and a part of speech, a definition can be looked up directly.\n\n    var wordnet = new natural.WordNet();\n\n    wordnet.get(4424418, 'n', function(result) {\n        console.log('------------------------------------');\n        console.log(result.lemma);\n        console.log(result.pos);\n        console.log(result.gloss);\n        console.log(result.synonyms);\n    });\n\nIf you have _manually_ downloaded the WordNet database files, you can pass the folder to the constructor:\n\n    var wordnet = new natural.WordNet('/my/wordnet/dict');\n\nAs of v0.1.11, WordNet data files are no longer automatically downloaded.\n\nPrinceton University \"About WordNet.\" WordNet. Princeton University. 2010. <http://wordnet.princeton.edu>\n\nDevelopment\n-----------\nWhen developing, please:\n\n+ Write unit tests\n+ Make sure your unit tests pass\n\nThe current configuration of the unit tests requires the following environment variable to be set:\n\n    export NODE_PATH=.\n\n\nLicense\n-------\n\nCopyright (c) 2011, Chris Umbel, Rob Ellis, Russell Mull\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\nWordNet License\n---------------\n\nThis license is available as the file LICENSE in any downloaded version of WordNet.\nWordNet 3.0 license: (Download)\n\nWordNet Release 3.0 This software and database is being provided to you, the LICENSEE, by Princeton University under the following license. By obtaining, using and/or copying this software and database, you agree that you have read, understood, and will comply with these terms and conditions.: Permission to use, copy, modify and distribute this software and database and its documentation for any purpose and without fee or royalty is hereby granted, provided that you agree to comply with the following copyright notice and statements, including the disclaimer, and that the same appear on ALL copies of the software, database and documentation, including modifications that you make for internal use or for distribution. WordNet 3.0 Copyright 2006 by Princeton University. All rights reserved. THIS SOFTWARE AND DATABASE IS PROVIDED \"AS IS\" AND PRINCETON UNIVERSITY MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, PRINCETON UNIVERSITY MAKES NO REPRESENTATIONS OR WARRANTIES OF MERCHANT- ABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE LICENSED SOFTWARE, DATABASE OR DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS. The name of Princeton University or Princeton may not be used in advertising or publicity pertaining to distribution of the software and/or database. Title to copyright in this software, database and any associated documentation shall at all times remain with Princeton University and LICENSEE agrees to preserve same.\n",
  "_id": "natural@0.1.17",
  "_from": "natural"
}
